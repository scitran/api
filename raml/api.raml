#%RAML 0.8
title: SciTran
version: 1
baseUri: https://docker.local.flywheel.io:8443/api

/download: !include resources/download.raml
/upload/label: !include resources/upload-by-label.raml
/upload/uid: !include resources/upload-by-uid.raml
/clean-packfiles: !include resources/clean-packfiles.raml
/engine: !include resources/engine.raml
/sites: !include resources/sites.raml
/config: !include resources/config.raml
/config.js: !include resources/config-js.raml
/version: !include resources/version.raml
/users: !include resources/users.raml

/jobs/add:
  description: Add a job
  post:
    body:
      application/json:
        example: !include examples/job_new.json
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "_id": "573cb66b135d87002660597c"
              }
/jobs:
  description: Run Gears on distributed computing
  get:
    description: List all jobs
    responses:
      200:
        body:
          application/json:
            example: !include examples/job_list.json
            schema: |
              {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "inputs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "input": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "input",
                          "type",
                          "id",
                          "name"
                        ]
                      }
                    },
                    "attempt": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "destination": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "type",
                        "id"
                      ]
                    },
                    "modified": {
                      "type": "string"
                    },
                    "created": {
                      "type": "string"
                    },
                    "state": {
                      "type": "string"
                    },
                    "_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "inputs",
                    "attempt",
                    "name",
                    "tags",
                    "destination",
                    "modified",
                    "created",
                    "state",
                    "_id"
                  ]
                }
              }
/jobs/next:
  description: Used by the engine
  get:
    description: Get the next job in the queue
    responses:
      200:
        body:
          application/json:
            example: !include examples/job.json
/jobs/stats:
  description: Job stats
  get:
    description: Get stats about all current jobs
    responses:
      200:
        body:
          application/json:
            example: !include examples/job_stats.json
/jobs/reap:
  description: Reap stale jobs
  post:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "orphaned":3
              }
/jobs/{JobId}:
  description: Perform actions with a specific job
  uriParameters:
    JobId:
      type: string
  get:
    description: Get info about a specific job
    responses:
      200:
        body:
          application/json:
            example: !include examples/job.json
      404:
        description: JobId not found
  put:
    description: |
      Update a job. Updates timestamp.
      Enforces a valid state machine transition, if any.
      Rejects any change to a job that is not currently in 'pending' or 'running' state.
      Accepts the same body as /api/jobs/add , except all fields are optional.
    body:
      application/json:
        example: |
          {
            "tags":[
              "test-tag"
            ]
          }
    responses:
      200:
        description: |
          The job has been updated.  No response body is sent.
/jobs/{JobId}/retry:
  uriParameters:
    JobId:
      type: string
  description: Retry a job
  post:
    description: |
      Retry a job
      The job must have a state of 'failed', and must not have already been retried.
      The failed jobs config is copied to a new job.
      The ID of the new job is returned
    responses:
      200:
        body:
          application/json:
            example: |
              {"_id":"57a35c118120be0e8d1f3f5f"}
/gears:
  description: Data processing algorithms
  get:
    description: List all gears
    queryParameters:
      fields:
        description: |
          Which fields to return.  Defaults to "name".
          Specify "all" for all fields.
          This parameter may be specified multiple times.
        type: string
        default: name
    responses:
      200:
          body:
            application/json:
              example: !include examples/gears_list_just_name.json
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ]
                  }
                }
/gears/{GearName}:
  description: Interact with a specific gear
  uriParameters:
    GearName:
      type: string
      description: Name of the gear to interact with
  post:
    description: |
      Create or update a gear.
      "Name" field of gear must match "GearName" uri parameter
      If no existing gear is found, one will be created
      Otherwise, the specified gear will be updated
    body:
      application/json:
        example: !include examples/gear_full.json
    responses:
      200:
        body:
          application/json:
            example: |
              {"name":"dcm_convert"}
  get:
    description: Retrieve details about a specific gear
    responses:
      200:
        body:
          application/json:
            example: !include examples/gear_full.json
  delete:
      description: Delete a gear (not recommended)
      responses:
        200:
          description: Gear was deleted
/rules:
  description: Rules for gears
  get:
    description: List all rules
    responses:
      200:
        body:
          application/json:
            example: !include examples/rules_list.json
  post:
    description: Upsert all rules
    body:
      application/json:
        example: !include examples/rules_list.json
    responses:
      200:
        description: Upsert successful

/groups:
  description: Groups
